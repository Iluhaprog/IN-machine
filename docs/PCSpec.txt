

                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    ~~~~~ Описание самодельного ЭВМ ~~~~~
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



                          ++++++++++++++++++++++++
                          +++ Общие требования +++
                          ++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
|                                                                              |
|                                                                              |
|                                                                              |
|    Данный компьютер должен иметь следующий функционал:                       |
|                                                                              |
|    1. работа с положительными и отрицательными числами                       |
|    2. уметь безусловно переходить по адресу в памяти [инструкция jump]       |
|    3. уметь переходить по адресу в памяти по условию [на основе флагов]      |
|    4. работать с самодельной клавиатурой                                     |
|    5. работать с монитором, который поддерживает VGA интерфейс               |
|                                                                              |
|                                                                              |
|                                                                              |
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



                          ++++++++++++++++++++++++
                          +++ Требования к АЛУ +++
                          ++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
|                                                                              |
|                                                                              |
|                                                                              |
|    >>  Арифметико-логическое устройство (АЛУ) должно  <<                     |
|    >>  иметь следующие операции:                      <<                     | 
|                                                                              |
|    1. Операция сложения                         -  (SUM)                     |
|    2. Операция побитового "И"                   -  (AND)                     |
|    3. Операция побитового "ИЛИ"                 -  (OR)                      |
|    4. Операция побитового "НЕ"                  -  (NOT)                     |
|    5. Операция побитового "исключающего ИЛИ"    -  (XOR)                     |
|    6. Операция сдвига на один бит влево         -  (SHL)                     |
|    7. Операция сдвига на один бит вправо        -  (SHR)                     |
|                                                                              |
|                                                                              |
|    >>  Также неотъемлемой частью АЛУ является         <<                     |
|    >>  регистр флагов он будет иметь следующую        <<                     |
|    >>  структуру:                                     <<                     |
|                                                                              |
|             +-------+-------+-------+-------+                                | 
|             | 3-bit | 2-bit | 1-bit | 0-bit |                                |
|             +-------+-------+-------+-------+                                |
|             |   Z   |   O   |   C   |   N   |                                |
|             +-------+-------+-------+-------+                                |
|                                                                              |
|    [Z] - ZERO      { флаг нулевого результата операции }                     |
|    [O] - OVERFLOW  { флаг переполнения                 }                     |
|    [C] - CARRY     { флаг переноса каретки             }                     |
|    [N] - NEGATIVE  { флаг отрицательного результата    }                     |
|                                                                              |
|                                                                              |
|                                                                              |
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



                          ++++++++++++++++++++++++
                          +++ Требования к УУ  +++
                          ++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
|                                                                              |
|                                                                              |
|                                                                              |
|    >>  Управляющее устройство должно исполнять          <<                   |
|    >>  следующий набор инструкций:                      <<                   |
|                                                                              |
|    +---------+--------------------------+----------------+                   |
|    | Команда |        Описание          |   Параметры    |                   |
|    +---------+--------------------------+----------------+                   |
|    | SET     | Установка значения в     | 1. номер реги- |                   |
|    |         | регистр                  |    стра        |                   |
|    |         |                          | 2. значение    |                   |
|    +---------+--------------------------+----------------+                   |
|    | MOV     | Перемещение значение     | 1. номер реги- |                   |
|    |         | из регистра {R1}         |    стра {R1}   |                   |
|    |         | в  регистр  {R2}         | 2. номер реги- |                   |
|    |         |                          |    стра {R2}   |                   |
|    +---------+--------------------------+----------------+                   |
|    | RD      | Чтение из ОЗУ            | 1. адрес {A1}  |                   |
|    |         | по адресу {А1}           | 2. номер реги- |                   |
|    |         | в регистр {R1}           |    стра {R1}   |                   |
|    +---------+--------------------------+----------------+                   |
|    | WT      | Чтение из регистра в ОЗУ | 1. адрес {A1}  |                   |
|    |         | по адресу {А1}           | 2. номер реги- |                   |
|    |         | из регистра {R1}         |    стра {R1}   |                   |
|    +---------+--------------------------+----------------+                   |
|    | SUM     | Суммирует значения реги- | 1. номер реги- |                   |
|    |         | стров {R1} и {R2} и за-  |    стра {R1}   |                   |
|    |         | писывает результат       | 2. номер реги- |                   |
|    |         | в регистр {R3}           |    стра {R2}   |                   |
|    |         |                          | 3. номер реги- |                   |
|    |         |                          |    стра {R3}   |                   |
|    +---------+--------------------------+----------------+                   |
|    | AND     | Побитово выпоняет        | 1. номер реги- |                   |
|    |         | функцию "И" для значений |    стра {R1}   |                   |
|    |         | из регистров {R1} и {R2} | 2. номер реги- |                   |
|    |         | и записывает результат   |    стра {R2}   |                   |
|    |         | в регистр  {R3}          | 3. номер реги- |                   |
|    |         |                          |    стра {R3}   |                   |
|    +---------+--------------------------+----------------+                   |
|    | OR      | Побитово выпоняет опера- | 1. номер реги- |                   |
|    |         | цию "ИЛИ" для значений   |    стра {R1}   |                   |
|    |         | из регистров {R1} и {R2} | 2. номер реги- |                   |
|    |         | и записывает результат   |    стра {R2}   |                   |
|    |         | в регистр  {R3}          | 3. номер реги- |                   |
|    |         |                          |    стра {R3}   |                   |
|    +---------+--------------------------+----------------+                   |
|    | XOR     | Побитово выпоняет опера- | 1. номер реги- |                   |
|    |         | цию "XOR" для значений   |    стра {R1}   |                   |
|    |         | из регистров {R1} и {R2} | 2. номер реги- |                   |
|    |         | и записывает результат   |    стра {R2}   |                   |
|    |         | в регистр  {R3}          | 3. номер реги- |                   |
|    |         |                          |    стра {R3}   |                   |
|    +---------+--------------------------+----------------+                   |
|    | NEG     | Побитово выпоняет опера- | 1. номер реги- |                   |
|    |         | цию побитового "НЕ" для  |    стра {R1}   |                   |
|    |         | значения в регистре {R1} | 2. номер реги- |                   |
|    |         | и записывает результат   |    стра {R2}   |                   |
|    |         | в  регистр  {R2}         |                |                   |
|    +---------+--------------------------+----------------+                   |
|    | JMP     | Переход по адресу {A1}   | 1. адрес {A1}  |                   |
|    |         | в ОЗУ                    |                |                   |
|    +---------+--------------------------+----------------+                   |
|    | JMP_EQ  | Переход по адресу {A1}   | 1. адрес {A1}  |                   |
|    |         | при условии,что Z = HIGH |                |                   |
|    |         | + значения регистров в + |                |                   |
|    |         | + предыдущей операции  + |                |                   |
|    |         | + равны                + |                |                   |
|    +---------+--------------------------+----------------+                   |
|    | JMP_NE  | Переход по адресу {A1}   | 1. адрес {A1}  |                   |
|    |         | при условии, что Z = LOW |                |                   |
|    |         |                          |                |                   |
|    |         | + значения регистров в + |                |                   |
|    |         | + предыдущей операции  + |                |                   |
|    |         | + не равны             + |                |                   |
|    +---------+--------------------------+----------------+                   |
|    | JMP_CS  | Переход по адресу {A1}   | 1. адрес {A1}  |                   |
|    |         | при условии,что C = HIGH |                |                   |
|    |         |                          |                |                   |
|    |         | +     {R1} >= {R2}     + |                |                   |
|    |         | +     для [0, 255]     + |                |                   |
|    +---------+--------------------------+----------------+                   |
|    | JMP_CC  | Переход по адресу {A1}   | 1. адрес {A1}  |                   |
|    |         | при условии, что C = LOW |                |                   |
|    |         |                          |                |                   |
|    |         | +     {R1} < {R2}      + |                |                   |
|    |         | +   для значениЙ > 0   + |                |                   |
|    |         | +     для [0, 255]     + |                |                   |
|    +---------+--------------------------+----------------+                   |
|    | JMP_MI  | Переход по адресу {A1}   | 1. адрес {A1}  |                   |
|    |         | при условии,что N = HIGH |                |                   |
|    |         |                          |                |                   |
|    |         | +      {R1} < 0        + |                |                   |
|    +---------+--------------------------+----------------+                   |
|    | JMP_PL  | Переход по адресу {A1}   | 1. адрес {A1}  |                   |
|    |         | при условии, что N = LOW |                |                   |
|    |         |                          |                |                   |
|    |         | +      {R1} >= 0       + |                |                   |
|    +---------+--------------------------+----------------+                   |
|    | JMP_VS  | Переход по адресу {A1}   | 1. адрес {A1}  |                   |
|    |         | при условии,что V = HIGH |                |                   |
|    |         |                          |                |                   |
|    |         | +      {R1} > 255      + |                |                   |
|    +---------+--------------------------+----------------+                   |
|    | JMP_VC  | Переход по адресу {A1}   | 1. адрес {A1}  |                   |
|    |         | при условии, что V = LOW |                |                   |
|    |         |                          |                |                   |
|    |         | +      {R1} < 256      + |                |                   |
|    |         | +          AND         + |                |                   |
|    |         | +       {R1} >= 0      + |                |                   |
|    +---------+--------------------------+----------------+                   |
|    | JMP_HI  | Переход по адресу {A1}   | 1. адрес {A1}  |                   |
|    |         | при условии,             |                |                   |
|    |         | что C = HIGH AND Z = LOW |                |                   |
|    |         |                          |                |                   |
|    |         | +     {R1} > {R2}      + |                |                   |
|    |         | +     для [0, 255]     + |                |                   |
|    +---------+--------------------------+----------------+                   |
|    | JMP_LS  | Переход по адресу {A1}   | 1. адрес {A1}  |                   |
|    |         | при условии,             |                |                   |
|    |         | что C = LOW OR Z = HIGH  |                |                   |
|    |         |                          |                |                   |
|    |         | +     {R1} <= {R2}     + |                |                   |
|    |         | +     для [0, 255]     + |                |                   |
|    +---------+--------------------------+----------------+                   |
|    | JMP_GE  | Переход по адресу {A1}   | 1. адрес {A1}  |                   |
|    |         | при условии,             |                |                   |
|    |         | что N = V                |                |                   |
|    |         |                          |                |                   |
|    |         | +     {R1} >= {R2}     + |                |                   |
|    |         | +    для [-128, 127]   + |                |                   |
|    +---------+--------------------------+----------------+                   |
|    | JMP_LT  | Переход по адресу {A1}   | 1. адрес {A1}  |                   |
|    |         | при условии,             |                |                   |
|    |         | что N != V               |                |                   |
|    |         |                          |                |                   |
|    |         | +      {R1} < {R2}     + |                |                   |
|    |         | +    для [-128, 127]   + |                |                   |
|    +---------+--------------------------+----------------+                   |
|    | JMP_GT  | Переход по адресу {A1}   | 1. адрес {A1}  |                   |
|    |         | при условии,             |                |                   |
|    |         | что Z = LOW AND N = V    |                |                   |
|    |         |                          |                |                   |
|    |         | +      {R1} > {R2}     + |                |                   |
|    |         | +    для [-128, 127]   + |                |                   |
|    +---------+--------------------------+----------------+                   |
|    | JMP_LE  | Переход по адресу {A1}   | 1. адрес {A1}  |                   |
|    |         | при условии,             |                |                   |
|    |         | что Z = HIGH AND N != V  |                |                   |
|    |         |                          |                |                   |
|    |         | +      {R1} <= {R2}    + |                |                   |
|    |         | +    для [-128, 127]   + |                |                   |
|    +---------+--------------------------+----------------+                   |
|    | RDF     | Чтение значения из FLASH | 1. адрес {A1}  |                   |
|    |         | памяти по адресу {A1} в  | 2. адрес {A2}  |                   |
|    |         | ОЗУ по адресу {A2}       |                |                   |
|    +---------+--------------------------+----------------+                   |
|    | WTF     | Запись значения из ОЗУ   | 1. адрес {A1}  |                   |
|    |         | по адресу {A1} во FLASH  | 2. адрес {A2}  |                   |
|    |         | память по адресу {A2}    |                |                   |
|    +---------+--------------------------+----------------+                   |
|    | WTS     | Запись значения из       | 1. номер реги- |                   |              
|    |         | регистра {R1} в память   |    стра {R1}   |                   |
|    |         | видеоадаптера            | 2. адрес {A1}  |                   |
|    |         | по адресу {A1}           |                |                   |
|    +---------+--------------------------+----------------+                   |
|    | WFS     | Чтение значения из FLASH | 1. адрес {A1}  |                   |
|    |         | памяти по адресу {A1} в  | 2. адрес {A2}  |                   |
|    |         | память видеоадаптера     |                |                   |
|    |         | по адресу {A2}           |                |                   |
|    +---------+--------------------------+----------------+                   |
|    | ENS     | Отобразить значение из   |                |                   |
|    |         | памяти видеоадаптера     |                |                   |
|    |         | на мониторе              |                |                   | 
|    +---------+--------------------------+----------------+                   |
|                                                                              |
|                                                                              |
|    >>  УУ должен поддерживать обработку прерывания.     <<                   |
|    >>  Т.к. устройство воода представленно только       <<                   |
|    >>  клавиатурой, то вывод для прерывания будет один. <<                   |
|                                                                              |
|                                                                              |
|    >>  Также УУ должно иметь четыре вывода для флагов   <<                   |
|                                                                              |
|                                                                              |
|                                                                              |
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



                ++++++++++++++++++++++++++++++++++++++++++++++
                +++ Представление команд в основной памяти +++
                ++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
|                                                                              |
|                                                                              |
|                                                                              |
|    !! Было принято решение сделать управление устройствами ЭВМ с !!          |
|    !! использованием ПЗУ. Это означает, что сигналы для управля- !!          |
|    !! ющей шины хранятся в ПЗУ. Далее будут указания о способе   !!          |
|    !! записи управляющих сигналов в ПЗУ и структуре команд в ос- !!          |
|    !! новной памяти.                                             !!          |
|                                                                              |
|                                                                              |
|    >> Способ записи управляющих сигналов в ПЗУ.                  <<          |
|                                                                              |
|    Выполнение каждой команды начинается с чтения этой команды из             |
|    основной памяти. Чтение имеет следующие нюансы:                           |
|    1. В момент запуска выполнения программы счетчик команд и счет-           |
|       чик микрокоманд сброшены, т.е. их значения равны нулевому              |
|       адресу.                                                                |
|    2. Т.к. после нажатия "пуск" генератор тактовых импульсов начи-           |
|       нает посылать импульсы на оба счетчкиа, важно, чтобы счетчик           |
|       адресов основной памяти не реагировал на эти импульсы до тех           |
|       пор, пока не поступит разрешающий сигнал.                              |
|    3. А счетчик микрокоманд начинает свою работу и отсчитывает им-           |
|       пульсы.                                                                |
|    4. Т.к. счетчик микрокоманд изначально сброшен, то логично                |
|       чтобы набор управляющих сигналов, которые считывают инструк-           |
|       ции из основной памяти находились начиная с адреса {h0000}             |
|    5. После выполнения инструкции необходимо снова сбросит счетчик           |
|       микрокоманд в значение {h0000}.                                        |
|                                                                              |
|    Выполнение каждой инструкции будет сотоять из набора микроко-             |
|    манд, микрокоманда - это набор сигналов управления устройсвами            |
|    связанными с УУ.                                                          |
|                                                                              |
|                                                                              |
|    В данной части будет больше описана структура инструкции без              |
|    дополнительного кода, т.к. дополнительный код непосредственно             |
|    связан с адресом, который указывает на участок с набором микро-           |
|    команд.                                                                   |
|                                                                              |
|    !! На данный момент, микрокоманды не прописанны и неизвест-  !!           |
|    !! ны номера адресов, с которых начианются управляющие сиг-  !!           |
|    !! налы для конкретных инструкций.                           !!           |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> SET <<<                                                               |
|                                                                              |
|      Структура в ОЗУ                                                         |
|    +-----------------+  Команда установки значения в пользова-               |
|    | 8-BIT           |  тельский регистр занимает 4 байта.                   |
|    +-----------------+                                                       |
|    | доп.код         |  !! Как и во всех командах ниже считыва- !!           |
|    +-----------------+  !! ние доп.кода происходит в два такта. !!           |
|    | доп.код         |  !! Далее считывание команд зависит от   !!           |
|    +-----------------+  !! доп.кода                             !!           |
|    | номер регистра  |                                                       |
|    +-----------------+                                                       |
|    | значение        |                                                       |
|    +-----------------+                                                       |
|                                                                              |
|    Пример:                                                                   |
|    - Предположим, что необходимо записать значение 16 в пользова-            |
|      тельский регистр под номером 5, тогда в ОЗУ это будет выгля-            |
|      деть следующим образом:                                                 |
|                                                                              |
|      +-------------+                                                         |
|      |  0000 0110  | <-- [ 1 байт ]                                          |
|      |  0000 0000  | <-- [ 2 байт ]                                          |
|      |  0000 0101  | <-- [ 3 байт ]                                          |
|      |  0001 0000  | <-- [ 4 байт ]                                          |
|      +-------------+                                                         |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> MOV <<<                                                               |
|                                                                              |
|        Структура в ОЗУ            Пример:                                    |
|    +---------------------+        - Предположим, что необходимо пе-          |
|    | 8-BIT               |          реместить значение из регистра           |
|    +---------------------+          под номером 3 в регистр, тогда           |
|    | доп.код             |          в ОЗУ это будет выглядеть следу-         |
|    +---------------------+          ющим образом:                            |
|    | доп.код             |          +-------------+                          |
|    +---------------------+          |  0000 1100  | <-- [ 1 байт ]           |
|    | номер регистра {R1} |          |  0000 0000  | <-- [ 2 байт ]           |
|    +---------------------+          |  0000 0011  | <-- [ 3 байт ]           |
|    | номер регистра {R1} |          |  0000 0110  | <-- [ 4 байт ]           |
|    +---------------------+          +-------------+                          |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> RD  <<<                                                               |
|                                                                              |
|           Структура в ОЗУ                                                    |
|    +--------------------------+   Пример:                                    |
|    | 8-BIT                    |   - Предположим, что необходимо пе-          | 
|    +--------------------------+     реместить занчение из ОЗУ, кото-         | 
|    | доп.код                  |     рое находится по адресу 32, в            | 
|    +--------------------------+     регистр под номером 5, тогда в           | 
|    | доп.код                  |     ОЗУ это будет выглядеть следу-           | 
|    +--------------------------+     ющим образом:                            | 
|    | старшие биты адреса {A1} |     +-------------+                          | 
|    +--------------------------+     | {XXXX XXXX} |  <-- [ 1 байт ]          | 
|    | младшие биты адреса {A1} |     | {XXXX XXXX} |  <-- [ 2 байт ]          | 
|    +--------------------------+     |  0000 0000  |  <-- [ 3 байт ]          | 
|    | номер регистра {R1}      |     |  0010 0000  |  <-- [ 4 байт ]          | 
|    +--------------------------+     |  0000 0101  |  <-- [ 5 байт ]          | 
|                                     +-------------+                          |
|                                                                              |
|    !!! Данная команда занимает 5 байт. !!!                                   |                         
|                                                                              |
|                                                                              |
|                                                                              | 
|    >>> WT  <<<                                                               |
|                                                                              |
|           Структура в ОЗУ                                                    |
|    +--------------------------+   Пример:                                    |
|    | 8-BIT                    |   - Предположим, что необходимо пе-          | 
|    +--------------------------+     реместить занчение в ОЗУ, кото-          | 
|    | доп.код                  |     рое находится по адресу 31, из           | 
|    +--------------------------+     регистра под номером 7, тогда в          | 
|    | доп.код                  |     ОЗУ это будет выглядеть следу-           | 
|    +--------------------------+     ющим образом:                            | 
|    | старшие биты адреса {A1} |     +-------------+                          | 
|    +--------------------------+     | {XXXX XXXX} |  <-- [ 1 байт ]          | 
|    | младшие биты адреса {A1} |     | {XXXX XXXX} |  <-- [ 2 байт ]          | 
|    +--------------------------+     |  0000 0000  |  <-- [ 3 байт ]          | 
|    | номер регистра {R1}      |     |  0001 1111  |  <-- [ 4 байт ]          | 
|    +--------------------------+     |  0000 0111  |  <-- [ 5 байт ]          | 
|                                     +-------------+                          |
|                                                                              |
|    !!! Данная команда занимает 5 байт. !!!                                   |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> SUM <<<                                                               |
|                                                                              |
|        Структура в ОЗУ                                                       |
|    +---------------------+        Пример:                                    |
|    | 8-BIT               |        - Предположим, что необходимо по-          |
|    +---------------------+          лучить сумму значений, которые           |
|    | доп.код             |          находятся в регистрах под номе-          |
|    +---------------------+          рами 4 и 0 и записать результат          |
|    | доп.код             |          в регистр под номером 7, тогда           |
|    +---------------------+          в ОЗУ это будет выглядеть слуду-         |
|    | номер регистра {R1} |          ющим образом:                            |
|    +---------------------+          +-------------+                          |
|    | номер регистра {R2} |          | {XXXX XXXX} |  <-- [ 1 байт ]          |
|    +---------------------+          | {XXXX XXXX} |  <-- [ 2 байт ]          |
|    | номер регистра {R3} |          |  0000 0100  |  <-- [ 3 байт ]          |
|    +---------------------+          |  0000 0000  |  <-- [ 4 байт ]          |
|                                     |  0000 0111  |  <-- [ 5 байт ]          |
|                                     +-------------+                          |
|                                                                              |
|    !!! Данная команда занимает 5 байт. !!!                                   |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> AND <<<                                                               |
|                                                                              |
|        Структура в ОЗУ                                                       |
|    +---------------------+        Пример:                                    |
|    | 8-BIT               |        - Предположим, что необходимо по-          |
|    +---------------------+          лучить побитовую коньюнкцию от           |
|    | доп.код             |          значений, которые находятся в            |
|    +---------------------+          регистрах под номерами 2 и 3             |
|    | доп.код             |          и записать результат в регистр           |
|    +---------------------+          под номером 7, тогда в ОЗУ это           |
|    | номер регистра {R1} |          будет выглядеть слудующим обра-          |
|    +---------------------+          зом:                                     |
|    | номер регистра {R2} |          +-------------+                          |
|    +---------------------+          | {XXXX XXXX} |  <-- [ 1 байт ]          |
|    | номер регистра {R3} |          | {XXXX XXXX} |  <-- [ 2 байт ]          |
|    +---------------------+          |  0000 0010  |  <-- [ 3 байт ]          |
|                                     |  0000 0011  |  <-- [ 4 байт ]          |
|                                     |  0000 0111  |  <-- [ 5 байт ]          |
|                                     +-------------+                          |
|                                                                              |
|    !!! Данная команда занимает 5 байт. !!!                                   |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> OR  <<<                                                               |
|                                                                              |
|        Структура в ОЗУ                                                       |
|    +---------------------+        Пример:                                    |
|    | 8-BIT               |        - Предположим, что необходимо по-          |
|    +---------------------+          лучить побитовую дизюнкцию от            |
|    | доп.код             |          значений, которые находятся в            |
|    +---------------------+          регистрах под номерами 4 и 3             |
|    | доп.код             |          и записать результат в регистр           |
|    +---------------------+          под номером 7, тогда в ОЗУ это           |
|    | номер регистра {R1} |          будет выглядеть слудующим обра-          |
|    +---------------------+          зом:                                     |
|    | номер регистра {R2} |          +-------------+                          |
|    +---------------------+          | {XXXX XXXX} |  <-- [ 1 байт ]          |
|    | номер регистра {R3} |          | {XXXX XXXX} |  <-- [ 2 байт ]          |
|    +---------------------+          |  0000 0100  |  <-- [ 3 байт ]          |
|                                     |  0000 0011  |  <-- [ 4 байт ]          |
|                                     |  0000 0111  |  <-- [ 5 байт ]          |
|                                     +-------------+                          |
|                                                                              |
|    !!! Данная команда занимает 5 байт. !!!                                   |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> XOR <<<                                                               |
|                                                                              |
|        Структура в ОЗУ                                                       |
|    +---------------------+        Пример:                                    |
|    | 8-BIT               |        - Предположим, что необходимо по-          |
|    +---------------------+          лучить побитовую XOR ф-ю от              |
|    | доп.код             |          значений, которые находятся в            |
|    +---------------------+          регистрах под номерами 0 и 7             |
|    | доп.код             |          и записать результат в регистр           |
|    +---------------------+          под номером 7, тогда в ОЗУ это           |
|    | номер регистра {R1} |          будет выглядеть слудующим обра-          |
|    +---------------------+          зом:                                     |
|    | номер регистра {R2} |          +-------------+                          |
|    +---------------------+          | {XXXX XXXX} |  <-- [ 1 байт ]          |
|    | номер регистра {R3} |          | {XXXX XXXX} |  <-- [ 2 байт ]          |
|    +---------------------+          |  0000 0000  |  <-- [ 3 байт ]          |
|                                     |  0000 0111  |  <-- [ 4 байт ]          |
|                                     |  0000 0111  |  <-- [ 5 байт ]          |
|                                     +-------------+                          |
|                                                                              |
|    !!! Данная команда занимает 5 байт. !!!                                   |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> NEG <<<                                                               |
|                                                                              |
|        Структура в ОЗУ                                                       |
|    +---------------------+        Пример:                                    |
|    | 8-BIT               |        - Прежположим, что необходимо ин-          |
|    +---------------------+          вертировать значение из регистра         |
|    | доп.код             |          под номером 4 и записать результат       |
|    +---------------------+          в регистр 5, тогда в ОЗУ это бу-         |
|    | доп.код             |          дет выглядеть следующим образом:         |
|    +---------------------+          +-------------+                          |
|    | номер регистра {R1} |          | {XXXX XXXX} |  <-- [ 1 байт ]          |
|    +---------------------+          | {XXXX XXXX} |  <-- [ 2 байт ]          |
|    | номер регистра {R2} |          |  0000 0100  |  <-- [ 3 байт ]          |
|    +---------------------+          |  0000 0101  |  <-- [ 4 байт ]          |
|                                     +-------------+                          |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> JMP <<<                                                               |
|                                                                              |
|           Структура в ОЗУ                                                    |
|    +--------------------------+   Пример:                                    |
|    | 8-BIT                    |   - Предположим, что необходимо пе-          |
|    +--------------------------+     рейти по адресу в основной па-           |
|    | доп.код                  |     мяти под следующим номером               |
|    +--------------------------+     1110 0010 0101 1111 (57 951),            |
|    | доп.код                  |     тогда в ОЗУ это будет выглядеть          |
|    +--------------------------+     следующим обрзом:                        |
|    | старшие биты адреса {A1} |     +-------------+                          |
|    +--------------------------+     | {XXXX XXXX} |  <-- [ 1 байт ]          |
|    | младшие биты адреса {A1} |     | {XXXX XXXX} |  <-- [ 2 байт ]          |
|    +--------------------------+     |  1110 0100  |  <-- [ 3 байт ]          |
|                                     |  0101 1111  |  <-- [ 4 байт ]          |
|                                     +-------------+                          |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> JMP_EQ <<<                                                            |
|                                                                              |
|           Структура в ОЗУ                                                    |
|    +--------------------------+   Пример:                                    |
|    | 8-BIT                    |   - Предположим, что необходимо пе-          |
|    +--------------------------+     рейти по адресу в основной па-           |
|    | доп.код                  |     мяти под следующим номером               |
|    +--------------------------+     1110 0010 0101 1111 (57 951),            |
|    | доп.код                  |     при устловии, что значения пре-          |
|    +--------------------------+     дыдущей операции равны, тогда в ОЗУ:     |
|    | старшие биты адреса {A1} |     +-------------+                          |
|    +--------------------------+     | {XXXX XXXX} |  <-- [ 1 байт ]          |
|    | младшие биты адреса {A1} |     | {XXXX XXXX} |  <-- [ 2 байт ]          |
|    +--------------------------+     |  1110 0100  |  <-- [ 3 байт ]          |
|                                     |  0101 1111  |  <-- [ 4 байт ]          |
|                                     +-------------+                          |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> JMP_NE <<<                                                            |
|                                                                              |
|           Структура в ОЗУ                                                    |
|    +--------------------------+   Пример:                                    |
|    | 8-BIT                    |   - Предположим, что необходимо пе-          |
|    +--------------------------+     рейти по адресу в основной па-           |
|    | доп.код                  |     мяти под следующим номером               |
|    +--------------------------+     1110 0010 0101 1111 (57 951),            |
|    | доп.код                  |     при устловии, что значения пре-          |
|    +--------------------------+     дыдущей операции не равны:               |
|    | старшие биты адреса {A1} |     +-------------+                          |
|    +--------------------------+     | {XXXX XXXX} |  <-- [ 1 байт ]          |
|    | младшие биты адреса {A1} |     | {XXXX XXXX} |  <-- [ 2 байт ]          |
|    +--------------------------+     |  1110 0100  |  <-- [ 3 байт ]          |
|                                     |  0101 1111  |  <-- [ 4 байт ]          |
|                                     +-------------+                          |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> JMP_CS <<<                                                            |
|                                                                              |
|           Структура в ОЗУ                                                    |
|    +--------------------------+   Пример:                                    |
|    | 8-BIT                    |   - Предположим, что необходимо пе-          |
|    +--------------------------+     рейти по адресу в основной па-           |
|    | доп.код                  |     мяти под следующим номером               |
|    +--------------------------+     1110 0010 0101 1111 (57 951),            |
|    | доп.код                  |     при устловии, что в предыдущей           |
|    +--------------------------+     операции для [U] {R1} >= {R2}:           |
|    | старшие биты адреса {A1} |     +-------------+                          |
|    +--------------------------+     | {XXXX XXXX} |  <-- [ 1 байт ]          |
|    | младшие биты адреса {A1} |     | {XXXX XXXX} |  <-- [ 2 байт ]          |
|    +--------------------------+     |  1110 0100  |  <-- [ 3 байт ]          |
|                                     |  0101 1111  |  <-- [ 4 байт ]          |
|                                     +-------------+                          |
|    [U] - числа в диапазоне от 0 до 255 включительно.                         |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> JMP_CC <<<                                                            |
|                                                                              |
|           Структура в ОЗУ                                                    |
|    +--------------------------+   Пример:                                    |
|    | 8-BIT                    |   - Предположим, что необходимо пе-          |
|    +--------------------------+     рейти по адресу в основной па-           |
|    | доп.код                  |     мяти под следующим номером               |
|    +--------------------------+     1110 0010 0101 1111 (57 951),            |
|    | доп.код                  |     при устловии, что в предыдущей           |
|    +--------------------------+     операции для [U] {R1} < {R2}:            |
|    | старшие биты адреса {A1} |     +-------------+                          |
|    +--------------------------+     | {XXXX XXXX} |  <-- [ 1 байт ]          |
|    | младшие биты адреса {A1} |     | {XXXX XXXX} |  <-- [ 2 байт ]          |
|    +--------------------------+     |  1110 0100  |  <-- [ 3 байт ]          |
|                                     |  0101 1111  |  <-- [ 4 байт ]          |
|                                     +-------------+                          |
|    [U] - числа в диапазоне от 0 до 255 включительно.                         |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> JMP_MI <<<                                                            |
|                                                                              |
|           Структура в ОЗУ                                                    |
|    +--------------------------+   Пример:                                    |
|    | 8-BIT                    |   - Предположим, что необходимо пе-          |
|    +--------------------------+     рейти по адресу в основной па-           |
|    | доп.код                  |     мяти под следующим номером               |
|    +--------------------------+     1110 0010 0101 1111 (57 951),            |
|    | доп.код                  |     при устловии, что в предыдущей           |
|    +--------------------------+     операции  {R1} < 0:                      |
|    | старшие биты адреса {A1} |     +-------------+                          |
|    +--------------------------+     | {XXXX XXXX} |  <-- [ 1 байт ]          |
|    | младшие биты адреса {A1} |     | {XXXX XXXX} |  <-- [ 2 байт ]          |
|    +--------------------------+     |  1110 0100  |  <-- [ 3 байт ]          |
|                                     |  0101 1111  |  <-- [ 4 байт ]          |
|                                     +-------------+                          |
|    {R1} - в данном случае это результат предыдущей инструкции                |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> JMP_PL <<<                                                            |
|                                                                              |
|           Структура в ОЗУ                                                    |
|    +--------------------------+   Пример:                                    |
|    | 8-BIT                    |   - Предположим, что необходимо пе-          |
|    +--------------------------+     рейти по адресу в основной па-           |
|    | доп.код                  |     мяти под следующим номером               |
|    +--------------------------+     1110 0010 0101 1111 (57 951),            |
|    | доп.код                  |     при устловии, что в предыдущей           |
|    +--------------------------+     операции  {R1} >= 0:                     |
|    | старшие биты адреса {A1} |     +-------------+                          |
|    +--------------------------+     | {XXXX XXXX} |  <-- [ 1 байт ]          |
|    | младшие биты адреса {A1} |     | {XXXX XXXX} |  <-- [ 2 байт ]          |
|    +--------------------------+     |  1110 0100  |  <-- [ 3 байт ]          |
|                                     |  0101 1111  |  <-- [ 4 байт ]          |
|                                     +-------------+                          |
|    {R1} - в данном случае это результат предыдущей инструкции                |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> JMP_VS <<<                                                            |
|                                                                              |
|           Структура в ОЗУ                                                    |
|    +--------------------------+   Пример:                                    |
|    | 8-BIT                    |   - Предположим, что необходимо пе-          |
|    +--------------------------+     рейти по адресу в основной па-           |
|    | доп.код                  |     мяти под следующим номером               |
|    +--------------------------+     1110 0010 0101 1111 (57 951),            |
|    | доп.код                  |     при устловии, что в предыдущей           |
|    +--------------------------+     операции  {R1} > 255:                    |
|    | старшие биты адреса {A1} |     +-------------+                          |
|    +--------------------------+     | {XXXX XXXX} |  <-- [ 1 байт ]          |
|    | младшие биты адреса {A1} |     | {XXXX XXXX} |  <-- [ 2 байт ]          |
|    +--------------------------+     |  1110 0100  |  <-- [ 3 байт ]          |
|                                     |  0101 1111  |  <-- [ 4 байт ]          |
|                                     +-------------+                          |
|    {R1} - в данном случае это результат предыдущей инструкции                |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> JMP_VC <<<                                                            |
|                                                                              |
|           Структура в ОЗУ                                                    |
|    +--------------------------+   Пример:                                    |
|    | 8-BIT                    |   - Предположим, что необходимо пе-          |
|    +--------------------------+     рейти по адресу в основной па-           |
|    | доп.код                  |     мяти под следующим номером               |
|    +--------------------------+     1110 0010 0101 1111 (57 951),            |
|    | доп.код                  |     при устловии, что в предыдущей           |
|    +--------------------------+     операции {R1} >= 0 {R1} < 256:           |
|    | старшие биты адреса {A1} |     +-------------+                          |
|    +--------------------------+     | {XXXX XXXX} |  <-- [ 1 байт ]          |
|    | младшие биты адреса {A1} |     | {XXXX XXXX} |  <-- [ 2 байт ]          |
|    +--------------------------+     |  1110 0100  |  <-- [ 3 байт ]          |
|                                     |  0101 1111  |  <-- [ 4 байт ]          |
|                                     +-------------+                          |
|    {R1} - в данном случае это результат предыдущей инструкции                |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> JMP_HI <<<                                                            |
|                                                                              |
|           Структура в ОЗУ                                                    |
|    +--------------------------+   Пример:                                    |
|    | 8-BIT                    |   - Предположим, что необходимо пе-          |
|    +--------------------------+     рейти по адресу в основной па-           |
|    | доп.код                  |     мяти под следующим номером               |
|    +--------------------------+     1110 0010 0101 1111 (57 951),            |
|    | доп.код                  |     при устловии, что в предыдущей           |
|    +--------------------------+     операции для [U] {R1} > {R2}:            |
|    | старшие биты адреса {A1} |     +-------------+                          |
|    +--------------------------+     | {XXXX XXXX} |  <-- [ 1 байт ]          |
|    | младшие биты адреса {A1} |     | {XXXX XXXX} |  <-- [ 2 байт ]          |
|    +--------------------------+     |  1110 0100  |  <-- [ 3 байт ]          |
|                                     |  0101 1111  |  <-- [ 4 байт ]          |
|                                     +-------------+                          |
|    [U] - числа в диапазоне от 0 до 255 включительно.                         |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> JMP_LS <<<                                                            |
|                                                                              |
|           Структура в ОЗУ                                                    |
|    +--------------------------+   Пример:                                    |
|    | 8-BIT                    |   - Предположим, что необходимо пе-          |
|    +--------------------------+     рейти по адресу в основной па-           |
|    | доп.код                  |     мяти под следующим номером               |
|    +--------------------------+     1110 0010 0101 1111 (57 951),            |
|    | доп.код                  |     при устловии, что в предыдущей           |
|    +--------------------------+     операции для [U] {R1} <= {R2}:           |
|    | старшие биты адреса {A1} |     +-------------+                          |
|    +--------------------------+     | {XXXX XXXX} |  <-- [ 1 байт ]          |
|    | младшие биты адреса {A1} |     | {XXXX XXXX} |  <-- [ 2 байт ]          |
|    +--------------------------+     |  1110 0100  |  <-- [ 3 байт ]          |
|                                     |  0101 1111  |  <-- [ 4 байт ]          |
|                                     +-------------+                          |
|    [U] - числа в диапазоне от 0 до 255 включительно.                         |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> JMP_GE <<<                                                            |
|                                                                              |
|           Структура в ОЗУ                                                    |
|    +--------------------------+   Пример:                                    |
|    | 8-BIT                    |   - Предположим, что необходимо пе-          |
|    +--------------------------+     рейти по адресу в основной па-           |
|    | доп.код                  |     мяти под следующим номером               |
|    +--------------------------+     1110 0010 0101 1111 (57 951),            |
|    | доп.код                  |     при устловии, что в предыдущей           |
|    +--------------------------+     операции для [S] {R1} >= {R2}:           |
|    | старшие биты адреса {A1} |     +-------------+                          |
|    +--------------------------+     | {XXXX XXXX} |  <-- [ 1 байт ]          |
|    | младшие биты адреса {A1} |     | {XXXX XXXX} |  <-- [ 2 байт ]          |
|    +--------------------------+     |  1110 0100  |  <-- [ 3 байт ]          |
|                                     |  0101 1111  |  <-- [ 4 байт ]          |
|                                     +-------------+                          |
|    [S] - числа в диапазоне от -128 до 127 включительно.                      |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> JMP_LT <<<                                                            |
|                                                                              |
|           Структура в ОЗУ                                                    |
|    +--------------------------+   Пример:                                    |
|    | 8-BIT                    |   - Предположим, что необходимо пе-          |
|    +--------------------------+     рейти по адресу в основной па-           |
|    | доп.код                  |     мяти под следующим номером               |
|    +--------------------------+     1110 0010 0101 1111 (57 951),            |
|    | доп.код                  |     при устловии, что в предыдущей           |
|    +--------------------------+     операции для [S] {R1} < {R2}:            |
|    | старшие биты адреса {A1} |     +-------------+                          |
|    +--------------------------+     | {XXXX XXXX} |  <-- [ 1 байт ]          |
|    | младшие биты адреса {A1} |     | {XXXX XXXX} |  <-- [ 2 байт ]          |
|    +--------------------------+     |  1110 0100  |  <-- [ 3 байт ]          |
|                                     |  0101 1111  |  <-- [ 4 байт ]          |
|                                     +-------------+                          |
|    [S] - числа в диапазоне от -128 до 127 включительно.                      |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> JMP_GT <<<                                                            |
|                                                                              |
|           Структура в ОЗУ                                                    |
|    +--------------------------+   Пример:                                    |
|    | 8-BIT                    |   - Предположим, что необходимо пе-          |
|    +--------------------------+     рейти по адресу в основной па-           |
|    | доп.код                  |     мяти под следующим номером               |
|    +--------------------------+     1110 0010 0101 1111 (57 951),            |
|    | доп.код                  |     при устловии, что в предыдущей           |
|    +--------------------------+     операции для [S] {R1} > {R2}:            |
|    | старшие биты адреса {A1} |     +-------------+                          |
|    +--------------------------+     | {XXXX XXXX} |  <-- [ 1 байт ]          |
|    | младшие биты адреса {A1} |     | {XXXX XXXX} |  <-- [ 2 байт ]          |
|    +--------------------------+     |  1110 0100  |  <-- [ 3 байт ]          |
|                                     |  0101 1111  |  <-- [ 4 байт ]          |
|                                     +-------------+                          |
|    [S] - числа в диапазоне от -128 до 127 включительно.                      |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> JMP_LE <<<                                                            |
|                                                                              |
|           Структура в ОЗУ                                                    |
|    +--------------------------+   Пример:                                    |
|    | 8-BIT                    |   - Предположим, что необходимо пе-          |
|    +--------------------------+     рейти по адресу в основной па-           |
|    | доп.код                  |     мяти под следующим номером               |
|    +--------------------------+     1110 0010 0101 1111 (57 951),            |
|    | доп.код                  |     при устловии, что в предыдущей           |
|    +--------------------------+     операции для [S] {R1} <= {R2}:           |
|    | старшие биты адреса {A1} |     +-------------+                          |
|    +--------------------------+     | {XXXX XXXX} |  <-- [ 1 байт ]          |
|    | младшие биты адреса {A1} |     | {XXXX XXXX} |  <-- [ 2 байт ]          |
|    +--------------------------+     |  1110 0100  |  <-- [ 3 байт ]          |
|                                     |  0101 1111  |  <-- [ 4 байт ]          |
|                                     +-------------+                          |
|    [S] - числа в диапазоне от -128 до 127 включительно.                      |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> RDF <<<                                                               |
|                                                                              |
|           Структура в ОЗУ                                                    |
|    +--------------------------+   Пример:                                    |
|    | 8-BIT                    |   - Предположим, что необходимо за-          |
|    +--------------------------+     присать значение из FLASH памяти         |
|    | доп.код                  |     по адресу {A1} в основную память         |
|    +--------------------------+     по адресу {A2}, тогда в ОЗУ это          |
|    | доп.код                  |     будет выглядеть следующим обра-          |
|    +--------------------------+     зом:                                     |
|    | старшие биты адреса {A1} |     {A1} = 0010 0011 0001 1111               |
|    +--------------------------+     {A2} = 0001 1101 0000 1010               |
|    | младшие биты адреса {A1} |     +-------------+                          |
|    +--------------------------+     | {XXXX XXXX} |  <-- [ 1 байт ]          |
|    | старшие биты адреса {A2} |     | {XXXX XXXX} |  <-- [ 2 байт ]          |
|    +--------------------------+     |  0010 0011  |  <-- [ 3 байт ]          |
|    | младшие биты адреса {A2} |     |  0001 1111  |  <-- [ 4 байт ]          |
|    +--------------------------+     |  0001 1101  |  <-- [ 5 байт ]          |
|                                     |  0000 1010  |  <-- [ 6 байт ]          |
|                                     +-------------+                          |
|    !!! Данная команда занимает 6 байт !!!                                    |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> WTF <<<                                                               |
|                                                                              |
|           Структура в ОЗУ                                                    |
|    +--------------------------+   Пример:                                    |
|    | 8-BIT                    |   - Предположим, что необходимо за-          |
|    +--------------------------+     присать значение из основной па-         |
|    | доп.код                  |     мяти по адресу {A1} во FLASH па-         |
|    +--------------------------+     мять по адресу {A2}, тогда в ОЗУ         |
|    | доп.код                  |     это будет выглядеть следующим об-        |
|    +--------------------------+     разом:                                   |
|    | старшие биты адреса {A1} |     {A1} = 0010 0011 0001 1111               |
|    +--------------------------+     {A2} = 0001 1101 0000 1010               |
|    | младшие биты адреса {A1} |     +-------------+                          |
|    +--------------------------+     | {XXXX XXXX} |  <-- [ 1 байт ]          |
|    | старшие биты адреса {A2} |     | {XXXX XXXX} |  <-- [ 2 байт ]          |
|    +--------------------------+     |  0010 0011  |  <-- [ 3 байт ]          |
|    | младшие биты адреса {A2} |     |  0001 1111  |  <-- [ 4 байт ]          |
|    +--------------------------+     |  0001 1101  |  <-- [ 5 байт ]          |
|                                     |  0000 1010  |  <-- [ 6 байт ]          |
|                                     +-------------+                          |
|    !!! Данная команда занимает 6 байт !!!                                    |
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> WTS <<<                                                               |
|                                                                              |
|           Структура в ОЗУ                                                    |
|    +--------------------------+   Пример:                                    |
|    | 8-BIT                    |   - Предположим, что необходимо за-          |
|    +--------------------------+     писать значение из регистра 5 в          |
|    | доп.код                  |     память видеоадаптера по адресу           |
|    +--------------------------+     0100 0111 0000 0011 (18 179),            |
|    | доп.код                  |     тогда в ОЗУ это будет выглядеть          |
|    +--------------------------+     следующим образом:                       |
|    | номер регистра {R1}      |     +-------------+                          |
|    +--------------------------+     | {XXXX XXXX} |  <-- [ 1 байт ]          |
|    | старшие биты адреса {A1} |     | {XXXX XXXX} |  <-- [ 2 байт ]          |
|    +--------------------------+     |  0000 0101  |  <-- [ 3 байт ]          |
|    | младшие биты адреса {A1} |     |  0100 0111  |  <-- [ 4 байт ]          |
|    +--------------------------+     |  0000 0011  |  <-- [ 5 байт ]          |
|                                     +-------------+                          |
|    !!! Данная команда занимает 5 байт !!!                                    | 
|                                                                              |
|                                                                              |
|                                                                              |
|    >>> WFS <<<                                                               |
|                                                                              |
|           Структура в ОЗУ                                                    |
|    +--------------------------+   Пример:                                    |
|    | 8-BIT                    |   - Предположим, что необходимо за-          |
|    +--------------------------+     присать значение из основной па-         |
|    | доп.код                  |     мяти по адресу {A1} в памиять ви-        |
|    +--------------------------+     деоадаптера по адресу {A2}, тогда        |
|    | доп.код                  |     в ОЗУ это будет выглядеть следующим      |
|    +--------------------------+     образом:                                 |
|    | старшие биты адреса {A1} |     {A1} = 0010 0011 0001 1111               |
|    +--------------------------+     {A2} = 0001 1101 0000 1010               |
|    | младшие биты адреса {A1} |     +-------------+                          |
|    +--------------------------+     | {XXXX XXXX} |  <-- [ 1 байт ]          |
|    | старшие биты адреса {A2} |     | {XXXX XXXX} |  <-- [ 2 байт ]          |
|    +--------------------------+     |  0010 0011  |  <-- [ 3 байт ]          |
|    | младшие биты адреса {A2} |     |  0001 1111  |  <-- [ 4 байт ]          |
|    +--------------------------+     |  0001 1101  |  <-- [ 5 байт ]          |
|                                     |  0000 1010  |  <-- [ 6 байт ]          |
|                                     +-------------+                          |
|    !!! Данная команда занимает 6 байт !!!                                    |
|                                                                              |
|                                                                              |
|                                                                              |
|     >>> ENS <<<                                                              |
|                                                                              |
|           Структура в ОЗУ                                                    |
|    +--------------------------+   Пример:                                    |
|    | 8-BIT                    |   - Предположим, что необходимо обно-        |
|    +--------------------------+     вить экран после загрузки инфор-         |
|    | доп.код                  |     мации в память видеоадаптера,            |
|    +--------------------------+     тогда в ОЗУ это будет выглядеть          |
|    | доп.код                  |     следующим образом:                       |
|    +--------------------------+     +-------------+                          |
|                                     | {XXXX XXXX} |  <-- [ 1 байт ]          | 
|                                     | {XXXX XXXX} |  <-- [ 2 байт ]          |
|                                     +-------------+                          |
|                                                                              |
|                                                                              |
|                                                                              |
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++